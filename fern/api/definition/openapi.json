{
  "openapi": "3.0.0",
  "paths": {
    "/v1/inbound-parse/mx/status": {
      "get": {
        "operationId": "getMxRecord",
        "summary": "Validate the mx record setup for the inbound parse functionality",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetMxRecordResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "inbound-parse"
        ],
        "x-request-name": "InboundParseController_getMxRecordStatusRequest"
      }
    },
    "/v1/environments/me": {
      "get": {
        "operationId": "getCurrent",
        "summary": "Get current environment",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_getCurrentEnvironmentRequest"
      }
    },
    "/v1/environments": {
      "post": {
        "operationId": "create",
        "summary": "Create environment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEnvironmentRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_createEnvironmentRequest"
      },
      "get": {
        "operationId": "getAll",
        "summary": "Get environments",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EnvironmentResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_getMyEnvironmentsRequest"
      }
    },
    "/v1/environments/{environmentId}": {
      "put": {
        "operationId": "update",
        "summary": "Update env by id",
        "parameters": [
          {
            "name": "environmentId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEnvironmentRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_updateMyEnvironmentRequest"
      }
    },
    "/v1/environments/api-keys": {
      "get": {
        "operationId": "getApiKeys",
        "summary": "Get api keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_getOrganizationApiKeysRequest"
      }
    },
    "/v1/environments/api-keys/regenerate": {
      "post": {
        "operationId": "regenerateApiKeys",
        "summary": "Regenerate api keys",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKey"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_regenerateOrganizationApiKeysRequest"
      }
    },
    "/v1/environments/widget/settings": {
      "put": {
        "operationId": "updateWidgetSettings",
        "summary": "Update widget settings",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateWidgetSettingsRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Environments"
        ],
        "x-request-name": "EnvironmentsController_updateWidgetSettingsRequest"
      }
    },
    "/v1/notification-groups": {
      "post": {
        "operationId": "create",
        "summary": "Create notification group",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationGroupRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationGroupResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Notification groups"
        ],
        "x-request-name": "NotificationGroupsController_createNotificationGroupRequest"
      },
      "get": {
        "operationId": "getAll",
        "summary": "Get notification groups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationGroupResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification groups"
        ],
        "x-request-name": "NotificationGroupsController_getNotificationGroupsRequest"
      }
    },
    "/v1/changes": {
      "get": {
        "operationId": "getAll",
        "summary": "Get changes",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "promoted",
            "required": true,
            "in": "query",
            "schema": {
              "default": "false",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ],
        "x-request-name": "ChangesController_getChangesRequest"
      }
    },
    "/v1/changes/count": {
      "get": {
        "operationId": "getCount",
        "summary": "Get changes count",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ],
        "x-request-name": "ChangesController_getChangesCountRequest"
      }
    },
    "/v1/changes/bulk/apply": {
      "post": {
        "operationId": "applyAll",
        "summary": "Apply changes",
        "parameters": [],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ],
        "x-request-name": "ChangesController_bulkApplyDiffRequest"
      }
    },
    "/v1/changes/{changeId}/apply": {
      "post": {
        "operationId": "apply",
        "summary": "Apply change",
        "parameters": [
          {
            "name": "changeId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Changes"
        ],
        "x-request-name": "ChangesController_applyDiffRequest"
      }
    },
    "/v1/layouts": {
      "post": {
        "operationId": "create",
        "summary": "Layout creation",
        "description": "Create a layout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLayoutRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The layout has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateLayoutResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_createLayoutRequest"
      },
      "get": {
        "operationId": "filter",
        "summary": "Filter layouts",
        "description": "Returns a list of layouts that can be paginated using the `page` query parameter and filtered by the environment where it is executed from the organization the user belongs to.",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of page for the pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Size of page for the pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort field. Currently only supported `createdAt`",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "Direction of the sorting query param. Either ascending (1) or descending (-1)",
            "schema": {
              "enum": [
                "ASC",
                -1
              ],
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of layouts that match the criteria of the query params are successfully returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterLayoutsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Page size can not be larger than the page size limit."
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_filterLayoutsRequest"
      }
    },
    "/v1/layouts/{layoutId}": {
      "get": {
        "operationId": "get",
        "summary": "Get layout",
        "description": "Get a layout by its ID",
        "parameters": [
          {
            "name": "layoutId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The layout with the layoutId provided exists in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLayoutResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "The layout with the layoutId provided does not exist in the database."
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_getLayoutRequest"
      },
      "delete": {
        "operationId": "delete",
        "summary": "Delete layout",
        "description": "Execute a soft delete of a layout given a certain ID.",
        "parameters": [
          {
            "name": "layoutId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The layout has been deleted correctly"
          },
          "404": {
            "description": "The layout with the layoutId provided does not exist in the database so it can not be deleted."
          },
          "409": {
            "description": "Either you are trying to delete a layout that is being used or a layout that is the default in the environment."
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_deleteLayoutRequest"
      },
      "patch": {
        "operationId": "update",
        "summary": "Update a layout",
        "description": "Update the name, content and variables of a layout. Also change it to be default or no.",
        "parameters": [
          {
            "name": "layoutId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLayoutRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The layout with the layoutId provided has been updated correctly.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateLayoutResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "The payload provided or the URL param are not right."
          },
          "404": {
            "description": "The layout with the layoutId provided does not exist in the database so it can not be updated."
          },
          "409": {
            "description": "One default layout is needed. If you are trying to turn a default layout as not default, you should turn a different layout as default first and automatically it will be done by the system."
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_updateLayoutRequest"
      }
    },
    "/v1/layouts/{layoutId}/default": {
      "post": {
        "operationId": "setDefault",
        "summary": "Set default layout",
        "description": "Sets the default layout for the environment and updates to non default to the existing default layout (if any).",
        "parameters": [
          {
            "name": "layoutId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The selected layout has been set as the default for the environment."
          },
          "404": {
            "description": "The layout with the layoutId provided does not exist in the database so it can not be set as the default for the environment."
          }
        },
        "tags": [
          "Layouts"
        ],
        "x-request-name": "LayoutsController_setDefaultLayoutRequest"
      }
    },
    "/v1/execution-details": {
      "get": {
        "operationId": "getAll",
        "summary": "Get execution details",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExecutionDetailsResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Execution Details"
        ],
        "x-request-name": "ExecutionDetailsController_getExecutionDetailsForNotificationRequest"
      }
    },
    "/v1/notification-templates": {
      "get": {
        "operationId": "getAll",
        "summary": "Get notification templates",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "schema": {
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_getNotificationTemplatesRequest"
      },
      "post": {
        "operationId": "createTemplate",
        "summary": "Create notification template",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNotificationTemplateRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_createNotificationTemplatesRequest"
      }
    },
    "/v1/notification-templates/{templateId}": {
      "put": {
        "operationId": "update",
        "summary": "Update notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNotificationTemplateRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_updateTemplateByIdRequest"
      },
      "delete": {
        "operationId": "delete",
        "summary": "Delete notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_deleteTemplateByIdRequest"
      },
      "get": {
        "operationId": "get",
        "summary": "Get notification template",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_getNotificationTemplateByIdRequest"
      }
    },
    "/v1/notification-templates/{templateId}/blueprint": {
      "get": {
        "operationId": "getBlueprint",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_getNotificationTemplateBlueprintByIdRequest"
      },
      "post": {
        "operationId": "createFromBlueprint",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": ""
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_createNotificationTemplateFromBlueprintByIdRequest"
      }
    },
    "/v1/notification-templates/{templateId}/status": {
      "put": {
        "operationId": "updateTemplateStatus",
        "summary": "Update notification template status",
        "parameters": [
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeTemplateStatusRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotificationTemplateResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Notification templates"
        ],
        "x-request-name": "NotificationTemplateController_changeActiveStatusRequest"
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "getAll",
        "summary": "Get integrations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_getIntegrationsRequest"
      },
      "post": {
        "operationId": "create",
        "summary": "Create integration",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_createIntegrationRequest"
      }
    },
    "/v1/integrations/active": {
      "get": {
        "operationId": "getActive",
        "summary": "Get active integrations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_getActiveIntegrationsRequest"
      }
    },
    "/v1/integrations/webhook/provider/{providerId}/status": {
      "get": {
        "operationId": "getWebhookSupportStatus",
        "summary": "Get webhook support status for provider",
        "parameters": [
          {
            "name": "providerId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_getWebhookSupportStatusRequest"
      }
    },
    "/v1/integrations/{integrationId}": {
      "put": {
        "operationId": "update",
        "summary": "Update integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIntegrationRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_updateIntegrationByIdRequest"
      },
      "delete": {
        "operationId": "delete",
        "summary": "Delete integration",
        "parameters": [
          {
            "name": "integrationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_removeIntegrationRequest"
      }
    },
    "/v1/integrations/{channelType}/limit": {
      "get": {
        "operationId": "getLimit",
        "parameters": [
          {
            "name": "channelType",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_getProviderLimitRequest"
      }
    },
    "/v1/integrations/in-app/status": {
      "get": {
        "operationId": "getInAppStatus",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "Integrations"
        ],
        "x-request-name": "IntegrationsController_getInAppActivatedRequest"
      }
    },
    "/v1/events/trigger": {
      "post": {
        "operationId": "trigger",
        "summary": "Trigger event",
        "description": "\n    Trigger event is the main (and the only) way to send notification to subscribers. \n    The trigger identifier is used to match the particular template associated with it. \n    Additional information can be passed according the body interface below.\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Events"
        ],
        "x-request-name": "EventsController_trackEventRequest"
      }
    },
    "/v1/events/trigger/bulk": {
      "post": {
        "operationId": "triggerBulk",
        "summary": "Bulk trigger event",
        "description": "\n      Using this endpoint you can trigger multiple events at once, to avoid multiple calls to the API.\n      The bulk API is limited to 100 events per request.\n    ",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkTriggerEventDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TriggerEventResponseDto"
                  }
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Events"
        ],
        "x-request-name": "EventsController_triggerBulkEventsRequest"
      }
    },
    "/v1/events/trigger/broadcast": {
      "post": {
        "operationId": "broadcastEvent",
        "summary": "Broadcast event to all",
        "description": "Trigger a broadcast event to all existing subscribers, could be used to send announcements, etc.\n      In the future could be used to trigger events to a subset of subscribers based on defined filters.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TriggerEventToAllRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerEventResponseDto"
                }
              }
            },
            "description": ""
          }
        },
        "tags": [
          "Events"
        ],
        "x-request-name": "EventsController_trackEventToAllRequest"
      }
    },
    "/v1/events/trigger/{transactionId}": {
      "delete": {
        "operationId": "cancelEvent",
        "summary": "Cancel triggered event",
        "description": "\n    Using a previously generated transactionId during the event trigger,\n     will cancel any active or pending workflows. This is useful to cancel active digests, delays etc...\n    ",
        "parameters": [
          {
            "name": "transactionId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          }
        },
        "tags": [
          "Events"
        ],
        "x-request-name": "EventsController_cancelDelayedRequest"
      }
    },
    "/v1/subscribers": {
      "get": {
        "operationId": "getAll",
        "summary": "Get subscribers",
        "description": "Returns a list of subscribers, could paginated using the `page` query parameter",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page to fetch, defaults to 0",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscribersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_getSubscribersRequest"
      },
      "post": {
        "operationId": "create",
        "summary": "Create subscriber",
        "description": "Creates a subscriber entity, in the Novu platform. The subscriber will be later used to receive notifications, and access notification feeds. Communication credentials such as email, phone number, and 3 rd party credentials i.e slack tokens could be later associated to this entity.",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_createSubscriberRequest"
      }
    },
    "/v1/subscribers/{subscriberId}": {
      "get": {
        "operationId": "get",
        "summary": "Get subscriber",
        "description": "Get subscriber by your internal id used to identify the subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_getSubscriberRequest"
      },
      "put": {
        "operationId": "update",
        "summary": "Update subscriber",
        "description": "Used to update the subscriber entity with new information",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_updateSubscriberRequest"
      },
      "delete": {
        "operationId": "delete",
        "summary": "Delete subscriber",
        "description": "Deletes a subscriber entity from the Novu platform",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteSubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_removeSubscriberRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/credentials": {
      "put": {
        "operationId": "updateCredentials",
        "summary": "Update subscriber credentials",
        "description": "Subscriber credentials associated to the delivery methods such as slack and push tokens.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_updateSubscriberChannelRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/online-status": {
      "patch": {
        "operationId": "updateOnlineStatus",
        "summary": "Update subscriber online status",
        "description": "Used to update the subscriber isOnline flag.",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberOnlineFlagRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubscriberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_updateSubscriberOnlineFlagRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/preferences": {
      "get": {
        "operationId": "getPreferences",
        "summary": "Get subscriber preferences",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_getSubscriberPreferenceRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/preferences/{templateId}": {
      "patch": {
        "operationId": "updatePreferences",
        "summary": "Update subscriber preference",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSubscriberPreferenceRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_updateSubscriberPreferenceRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/feed": {
      "get": {
        "operationId": "getFeed",
        "summary": "Get a notification feed for a particular subscriber",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "feedIdentifier",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "seen",
            "required": false,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_getNotificationsFeedRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/notifications/unseen": {
      "get": {
        "operationId": "getUnseenNotificationCount",
        "summary": "Get the unseen notification count for subscribers feed",
        "parameters": [
          {
            "name": "seen",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnseenCountResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_getUnseenCountRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/messages/{messageId}/seen": {
      "post": {
        "operationId": "markMessageSeen",
        "summary": "Mark a subscriber feed message as seen",
        "description": "This endpoint is deprecated please address /:subscriberId/messages/markAs instead",
        "deprecated": true,
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_markMessageAsSeenRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/messages/markAs": {
      "post": {
        "operationId": "markAllMessagesSeen",
        "summary": "Mark a subscriber feed message as seen",
        "parameters": [
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MarkMessageAsRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_markMessageAsRequest"
      }
    },
    "/v1/subscribers/{subscriberId}/messages/{messageId}/actions/{type}": {
      "post": {
        "operationId": "markMessageActionSeen",
        "summary": "Mark message action as seen",
        "parameters": [
          {
            "name": "messageId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subscriberId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Subscribers"
        ],
        "x-request-name": "SubscribersController_markActionAsSeenRequest"
      }
    },
    "/v1/topics": {
      "post": {
        "operationId": "create",
        "summary": "Topic creation",
        "description": "Create a topic",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTopicRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateTopicResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_createTopicRequest"
      },
      "get": {
        "operationId": "filter",
        "summary": "Filter topics",
        "description": "Returns a list of topics that can be paginated using the `page` query parameter and filtered by the topic key with the `key` query parameter",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Number of page for the pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "Size of page for the pagination",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "key",
            "required": false,
            "in": "query",
            "description": "Topic key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterTopicsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_filterTopicsRequest"
      }
    },
    "/v1/topics/{topicKey}/subscribers": {
      "post": {
        "operationId": "addSubscribers",
        "summary": "Subscribers addition",
        "description": "Add subscribers to a topic by key",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddSubscribersRequestDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_addSubscribersRequest"
      }
    },
    "/v1/topics/{topicKey}/subscribers/removal": {
      "post": {
        "operationId": "removeSubscibers",
        "summary": "Subscribers removal",
        "description": "Remove subscribers from a topic",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveSubscribersRequestDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": ""
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_removeSubscribersRequest"
      }
    },
    "/v1/topics/{topicKey}": {
      "get": {
        "operationId": "getTopicByKey",
        "summary": "Get topic",
        "description": "Get a topic by its topic key",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTopicResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_getTopicRequest"
      },
      "patch": {
        "operationId": "rename",
        "summary": "Rename a topic",
        "description": "Rename a topic by providing a new name",
        "parameters": [
          {
            "name": "topicKey",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameTopicRequestDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RenameTopicResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Topics"
        ],
        "x-request-name": "TopicsController_renameTopicRequest"
      }
    },
    "/v1/activity": {
      "get": {
        "operationId": "getFeed",
        "summary": "Get activity feed",
        "deprecated": true,
        "parameters": [
          {
            "name": "channels",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "in_app",
                  "email",
                  "sms",
                  "chat",
                  "push"
                ]
              }
            }
          },
          {
            "name": "templates",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "emails",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "transactionId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ],
        "x-request-name": "ActivityController_getActivityFeedRequest"
      }
    },
    "/v1/activity/stats": {
      "get": {
        "operationId": "getActivityStats",
        "summary": "Get activity statistics",
        "deprecated": true,
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityStatsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ],
        "x-request-name": "ActivityController_getActivityStatsRequest"
      }
    },
    "/v1/activity/graph/stats": {
      "get": {
        "operationId": "getActivityGraphStats",
        "summary": "Get activity graph statistics",
        "deprecated": true,
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityGraphStatesResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Activity"
        ],
        "x-request-name": "ActivityController_getActivityGraphStatsRequest"
      }
    },
    "/v1/notifications": {
      "get": {
        "operationId": "getAll",
        "summary": "Get notifications",
        "parameters": [
          {
            "name": "channels",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "in_app",
                  "email",
                  "sms",
                  "chat",
                  "push"
                ]
              }
            }
          },
          {
            "name": "templates",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "emails",
            "required": true,
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "search",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "schema": {
              "default": 0,
              "type": "number"
            }
          },
          {
            "name": "transactionId",
            "required": false,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ],
        "x-request-name": "NotificationsController_getNotificationsRequest"
      }
    },
    "/v1/notifications/stats": {
      "get": {
        "operationId": "getNotificationStats",
        "summary": "Get notification statistics",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityStatsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ],
        "x-request-name": "NotificationsController_getActivityStatsRequest"
      }
    },
    "/v1/notifications/graph/stats": {
      "get": {
        "operationId": "getNotificationGraphStats",
        "summary": "Get notification graph statistics",
        "parameters": [
          {
            "name": "days",
            "required": false,
            "in": "query",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityGraphStatesResponse"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ],
        "x-request-name": "NotificationsController_getActivityGraphStatsRequest"
      }
    },
    "/v1/notifications/{notificationId}": {
      "get": {
        "operationId": "get",
        "summary": "Get notification",
        "parameters": [
          {
            "name": "notificationId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityNotificationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Notification"
        ],
        "x-request-name": "NotificationsController_getActivityRequest"
      }
    },
    "/v1/feeds": {
      "post": {
        "operationId": "create",
        "summary": "Create feed",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFeedRequestDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeedResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ],
        "x-request-name": "FeedsController_createFeedRequest"
      },
      "get": {
        "operationId": "getAll",
        "summary": "Get feeds",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ],
        "x-request-name": "FeedsController_getFeedsRequest"
      }
    },
    "/v1/feeds/{feedId}": {
      "delete": {
        "operationId": "delete",
        "summary": "Delete feed",
        "parameters": [
          {
            "name": "feedId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeedResponseDto"
                  }
                }
              }
            }
          }
        },
        "tags": [
          "Feeds"
        ],
        "x-request-name": "FeedsController_deleteFeedByIdRequest"
      }
    },
    "/v1/messages": {
      "get": {
        "operationId": "getAll",
        "summary": "Get messages",
        "description": "Returns a list of messages, could paginate using the `page` query parameter",
        "parameters": [
          {
            "name": "channel",
            "required": false,
            "in": "query",
            "description": "The channel for the messages you wish to list",
            "schema": {
              "$ref": "#/components/schemas/GetMessagesParametersSchema"
            }
          },
          {
            "name": "subscriberId",
            "required": false,
            "in": "query",
            "description": "The subscriberId for the subscriber you like to list messages for",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "The number of messages to fetch, defaults to 10",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page to fetch, defaults to 0",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitiesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Messages"
        ],
        "x-request-name": "MessagesController_getMessagesRequest"
      }
    },
    "/v1/messages/{messageId}": {
      "delete": {
        "operationId": "delete",
        "summary": "Delete message",
        "description": "Deletes a message entity from the Novu platform",
        "parameters": [],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteMessageResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Messages"
        ],
        "x-request-name": "MessagesController_deleteMessageRequest"
      }
    }
  },
  "info": {
    "title": "Novu API",
    "description": "The Novu API description",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Events",
      "description": ""
    },
    {
      "name": "Subscribers",
      "description": ""
    },
    {
      "name": "Topics",
      "description": ""
    },
    {
      "name": "Activity",
      "description": ""
    },
    {
      "name": "Integrations",
      "description": ""
    },
    {
      "name": "Layouts",
      "description": ""
    },
    {
      "name": "Notification templates",
      "description": ""
    },
    {
      "name": "Notification groups",
      "description": ""
    },
    {
      "name": "Changes",
      "description": ""
    },
    {
      "name": "Environments",
      "description": ""
    },
    {
      "name": "Execution details",
      "description": ""
    },
    {
      "name": "Feeds",
      "description": ""
    },
    {
      "name": "Messages",
      "description": ""
    },
    {
      "name": "Execution Details",
      "description": ""
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "GetMxRecordResponseDto": {
        "type": "object",
        "properties": {
          "mxRecordConfigured": {
            "type": "boolean"
          }
        },
        "required": [
          "mxRecordConfigured"
        ]
      },
      "ApiKey": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "_userId": {
            "type": "string"
          }
        },
        "required": [
          "key",
          "_userId"
        ]
      },
      "WidgetSettings": {
        "type": "object",
        "properties": {
          "notificationCenterEncryption": {
            "type": "boolean"
          }
        },
        "required": [
          "notificationCenterEncryption"
        ]
      },
      "EnvironmentResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "apiKeys": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApiKey"
            }
          },
          "widget": {
            "$ref": "#/components/schemas/WidgetSettings"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_organizationId",
          "identifier",
          "apiKeys",
          "widget",
          "_parentId"
        ]
      },
      "CreateEnvironmentRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "UpdateEnvironmentRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "parentId": {
            "type": "string"
          },
          "dns": {
            "$ref": "#/components/schemas/DNSProperties"
          }
        },
        "required": [
          "dns"
        ]
      },
      "UpdateWidgetSettingsRequestDto": {
        "type": "object",
        "properties": {
          "notificationCenterEncryption": {
            "type": "boolean"
          }
        },
        "required": [
          "notificationCenterEncryption"
        ]
      },
      "CreateNotificationGroupRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "NotificationGroupResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_environmentId",
          "_organizationId"
        ]
      },
      "ChangeResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_entityId": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/ChangeResponseDtoProperties",
            "type": "string"
          },
          "change": {
            "type": "object"
          },
          "createdAt": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "_creatorId",
          "_environmentId",
          "_organizationId",
          "_entityId",
          "enabled",
          "type",
          "change",
          "createdAt"
        ]
      },
      "ChangesResponseDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeResponseDto"
            }
          },
          "pageSize": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "required": [
          "totalCount",
          "data",
          "pageSize",
          "page"
        ]
      },
      "CreateLayoutRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user that will name the Layout created."
          },
          "description": {
            "type": "string",
            "description": "User description of the layout"
          },
          "content": {
            "type": "string",
            "description": "User defined content for the layout."
          },
          "variables": {
            "description": "User defined variables to render in the layout placeholders.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isDefault": {
            "type": "boolean",
            "description": "Variable that defines if the layout is chosen as default when creating a layout."
          }
        },
        "required": [
          "name",
          "content"
        ]
      },
      "CreateLayoutResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "FilterLayoutsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "page",
          "pageSize",
          "totalCount"
        ]
      },
      "GetLayoutResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/GetLayoutResponseDtoProperties",
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "_organizationId",
          "_environmentId",
          "_creatorId",
          "name",
          "channel",
          "content",
          "contentType",
          "isDefault",
          "isDeleted"
        ]
      },
      "UpdateLayoutRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user that will name the Layout updated."
          },
          "description": {
            "type": "string",
            "description": "User defined description of the layout"
          },
          "content": {
            "type": "string",
            "description": "User defined content for the layout."
          },
          "variables": {
            "description": "User defined variables to render in the layout placeholders.",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isDefault": {
            "type": "boolean",
            "description": "Variable that defines if the layout is chosen as default when creating a layout."
          }
        }
      },
      "UpdateLayoutResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/UpdateLayoutRequestDtoProperties",
            "type": "string"
          },
          "content": {
            "type": "string"
          },
          "contentType": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "isDefault": {
            "type": "boolean"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "_organizationId",
          "_environmentId",
          "_creatorId",
          "name",
          "channel",
          "content",
          "contentType",
          "isDefault",
          "isDeleted"
        ]
      },
      
      "ExecutionDetailsResponseDtoStatus": {
        "enum": [
          "Success",
          "Warning",
          "Failed",
          "Pending",
          "Queued",
          "ReadConfirmation"
        ]
      },
      "ExecutionDetailsResponseDtoSource": {
        "enum": [
          "Credentials",
          "Internal",
          "Payload",
          "Webhook"
        ]
      },
      "ExecutionDetailsResponseDtoChannel": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push",
          "digest",
          "trigger",
          "delay"
        ]
      },
      "ExecutionDetailsResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_jobId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_notificationId": {
            "type": "string"
          },
          "_notificationTemplateId": {
            "type": "string"
          },
          "_subscriberId": {
            "type": "string"
          },
          "_messageId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/ExecutionDetailsResponseDtoChannel",
            "type": "string"
          },
          "detail": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ExecutionDetailsResponseDtoSource",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionDetailsResponseDtoStatus",
            "type": "string"
          },
          "isTest": {
            "type": "boolean"
          },
          "isRetry": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "required": [
          "_organizationId",
          "_jobId",
          "_environmentId",
          "_notificationId",
          "_notificationTemplateId",
          "_subscriberId",
          "transactionId",
          "detail",
          "source",
          "status",
          "isTest",
          "isRetry"
        ]
      },
      "NotificationGroup": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "_environmentId",
          "_organizationId"
        ]
      },
      "PreferenceChannels": {
        "type": "object",
        "properties": {
          "email": {
            "type": "boolean"
          },
          "sms": {
            "type": "boolean"
          },
          "in_app": {
            "type": "boolean"
          },
          "chat": {
            "type": "boolean"
          },
          "push": {
            "type": "boolean"
          }
        }
      },
      "MessageTemplate": {
        "type": "object",
        "properties": {}
      },
      "DNSProperties": {
        "type": "object",
        "properties": {
          "inboundParseDomain": {
            "required": true,
            "type": "string"
          }
        }
      },
      "FieldFilterPartOperator":{
        "type": "string",
        "enum": [
          "LARGER",
          "SMALLER",
          "LARGER_EQUAL",
          "SMALLER_EQUAL",
          "EQUAL",
          "NOT_EQUAL",
          "ALL_IN",
          "ANY_IN",
          "NOT_IN",
          "BETWEEN",
          "NOT_BETWEEN",
          "LIKE",
          "NOT_LIKE",
          "IN"
        ]
      },
      "FieldFilterPartOn":{
        "type": "string",
        "enum": [
          "subscriber",
          "payload"
        ]
      },
      "FieldFilterPart": {
        "type": "object",
        "properties": {
          "field": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "operator": {
            "$ref": "#/components/schemas/FieldFilterPartOperator"
          },
          "on": {
            "$ref": "#/components/schemas/FieldFilterPartOn"
          }
        },
        "required": [
          "field",
          "value",
          "operator",
          "on"
        ]
      },
      "StepFilterValue":{
        "type": "string",
        "enum": [
          "AND",
          "OR"
        ]
      },
      "StepFilterType":{
        "type": "string",
        "enum": [
          "BOOLEAN",
          "TEXT",
          "DATE",
          "NUMBER",
          "STATEMENT",
          "LIST",
          "MULTI_LIST",
          "GROUP"
        ]
      },
      "StepFilter": {
        "type": "object",
        "properties": {
          "isNegated": {
            "type": "boolean"
          },
          "type": {
            "$ref": "#/components/schemas/StepFilterType"
          },
          "value": {
            "$ref": "#/components/schemas/StepFilterValue"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldFilterPart"
            }
          }
        },
        "required": [
          "isNegated",
          "type",
          "value",
          "children"
        ]
      },
      "NotificationStepMetadataUnit":{
        "type": "string",
        "enum": [
          "seconds",
          "minutes",
          "hours",
          "days"
        ]
      },
      "NotificationStepMetadataType":{
        "type": "string",
        "enum": [
          "regular",
          "backoff",
          "scheduled"
        ]
      },
      "NotificationStepMetadataBackofUnit":{
        "type": "string",
        "enum": [
          "seconds",
          "minutes",
          "hours",
          "days"
        ]
      },
      "NotificationStepMetadata": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number"
          },
          "unit": {
            "$ref": "#/components/schemas/NotificationStepMetadataUnit"
          },
          "digestKey": {
            "type": "string"
          },
          "delayPath": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/NotificationStepMetadataType"
          },
          "backoffUnit": {
            "$ref": "#/components/schemas/NotificationStepMetadataBackofUnit"
          },
          "backoffAmount": {
            "type": "number"
          },
          "updateMode": {
            "type": "boolean"
          }
        },
        "required": [
          "type"
        ]
      },
      "NotificationStep": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_templateId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "shouldStopOnFail": {
            "type": "boolean"
          },
          "template": {
            "$ref": "#/components/schemas/MessageTemplate"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilter"
            }
          },
          "_parentId": {
            "type": "string"
          },
          "metadata": {
            "$ref": "#/components/schemas/NotificationStepMetadata"
          },
          "replyCallback": {
            "type": "object"
          }
        }
      },
      "NotificationTriggerVariable": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "NotificationTrigger": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          },
          "subscriberVariables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTriggerVariable"
            }
          }
        },
        "required": [
          "type",
          "identifier",
          "variables"
        ]
      },
      "NotificationTemplateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "draft": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          },
          "critical": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStep"
            }
          },
          "_organizationId": {
            "type": "string"
          },
          "_creatorId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTrigger"
            }
          },
          "_notificationGroupId": {
            "type": "string"
          },
          "_parentId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          },
          "notificationGroup": {
            "$ref": "#/components/schemas/NotificationGroup"
          }
        },
        "required": [
          "name",
          "description",
          "active",
          "draft",
          "preferenceSettings",
          "critical",
          "tags",
          "steps",
          "_organizationId",
          "_creatorId",
          "_environmentId",
          "triggers",
          "_notificationGroupId",
          "deleted",
          "deletedAt",
          "deletedBy"
        ]
      },
      "UpdateNotificationTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationStep"
            }
          },
          "notificationGroupId": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "critical": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        },
        "required": [
          "name",
          "notificationGroupId"
        ]
      },
      "NotificationChannel": {
        "type": "object",
        "properties": {
          "template": {
            "$ref": "#/components/schemas/MessageTemplate"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepFilter"
            }
          },
          "active": {
            "type": "boolean"
          }
        }
      },
      "CreateNotificationTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "notificationGroupId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationChannel"
            }
          },
          "active": {
            "type": "boolean"
          },
          "draft": {
            "type": "boolean"
          },
          "critical": {
            "type": "boolean"
          },
          "preferenceSettings": {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        },
        "required": [
          "name",
          "notificationGroupId",
          "steps"
        ]
      },
      "ChangeTemplateStatusRequestDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          }
        },
        "required": [
          "active"
        ]
      },
      "CredentialsDto": {
        "type": "object",
        "properties": {
          "apiKey": {
            "type": "string"
          },
          "user": {
            "type": "string"
          },
          "secretKey": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "host": {
            "type": "string"
          },
          "port": {
            "type": "string"
          },
          "secure": {
            "type": "boolean"
          },
          "region": {
            "type": "string"
          },
          "accountSid": {
            "type": "string"
          },
          "messageProfileId": {
            "type": "string"
          },
          "token": {
            "type": "string"
          },
          "from": {
            "type": "string"
          },
          "senderName": {
            "type": "string"
          },
          "projectName": {
            "type": "string"
          },
          "applicationId": {
            "type": "string"
          },
          "clientId": {
            "type": "string"
          }
        }
      },
      "IntegrationResponseDtoChannelChannel":{
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ]
      },
      "IntegrationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/IntegrationResponseDtoChannelChannel",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "active": {
            "type": "boolean"
          },
          "deleted": {
            "type": "boolean"
          },
          "deletedAt": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          }
        },
        "required": [
          "_environmentId",
          "_organizationId",
          "providerId",
          "channel",
          "credentials",
          "active",
          "deleted",
          "deletedAt",
          "deletedBy"
        ]
      },
      "CreateEnvironmentRequestDtoChannel": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ]
      },
      "CreateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/CreateEnvironmentRequestDtoChannel",
            "type": "string"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "active": {
            "type": "boolean"
          },
          "check": {
            "type": "boolean"
          }
        },
        "required": [
          "providerId",
          "channel",
          "credentials",
          "active",
          "check"
        ]
      },
      "UpdateIntegrationRequestDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean"
          },
          "credentials": {
            "$ref": "#/components/schemas/CredentialsDto"
          },
          "check": {
            "type": "boolean"
          }
        },
        "required": [
          "active",
          "credentials",
          "check"
        ]
      },
      "TopicPayloadDtoType":{
        "type": "string",
      },
      "TopicPayloadDto": {
        "type": "object",
        "properties": {
          "topicKey": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/TopicPayloadDtoType"
          }
        },
        "required": [
          "topicKey",
          "type"
        ]
      },
      "SubscriberPayloadDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        }
      },
      "GetLayoutResponseDtoProperties": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ]
      },
      "UpdateLayoutRequestDtoProperties": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ]
      },
      "ChangeResponseDtoProperties": {
        "enum": [
          "Feed",
          "MessageTemplate",
          "Layout",
          "DefaultLayout",
          "NotificationTemplate",
          "NotificationGroup"
        ]
      },
      "TriggerEventRequestDtoTo": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/SubscriberPayloadDto"
          },
          {
            "type": "list<$ref: #/components/schemas/SubscriberPayloadDto>",
            "description": "List of subscriber objects"
          },
          {
            "type": "string",
            "description": "Unique identifier of a subscriber in your systems"
          },
          {
            "type": "string",
            "description": "List of subscriber identifiers"
          },
          {
            "$ref": "#/components/schemas/TopicPayloadDto"
          },
          {
            "type": "[TopicPayloadDto]",
            "description": "List of topics"
          }
        ]
      },
      "TriggerEventRequestDtoActor":{
        "oneOf": [
          {
            "type": "string",
            "description": "Unique identifier of a subscriber in your systems"
          },
          {
            "$ref": "#/components/schemas/SubscriberPayloadDto"
          }
        ]
      },
      "TriggerEventRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier of the template you wish to send. This identifier can be found on the template page."
          },
          "payload": {
            "type": "object",
            "description": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. \n      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            }
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "color": "#fff"
              }
            }
          },
          "to": {
            "description": "The recipients list of people who will receive the notification.",
            "$ref": "#/components/schemas/TriggerEventRequestDtoTo",
            "items": {
              "type": "object"
            }
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generated a UUID if not provided."
          },
          "actor": {
            "description": "It is used to display the Avatar of the provided actor's subscriber id or actor object.\n    If a new actor object is provided, we will create a new subscriber in our system\n    ",
            "$ref": "#/components/schemas/TriggerEventRequestDtoActor"
          }
        },
        "required": [
          "name",
          "payload",
          "to"
        ]
      },
      "TriggerEventResponseDtoStatus":{
        "type": "string",
        "description": "Status for trigger",
        "enum": [
          "processed",
          "trigger_not_active",
          "subscriber_id_missing",
          "error"
        ]
      },
      "TriggerEventResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "If trigger was acknowledged or not"
          },
          "status": {
            "$ref": "#/components/schemas/TriggerEventResponseDtoStatus"
          },
          "error": {
            "description": "In case of an error, this field will contain the error message",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "transactionId": {
            "type": "string",
            "description": "Transaction id for trigger"
          }
        },
        "required": [
          "acknowledged",
          "status"
        ]
      },
      "BulkTriggerEventDto": {
        "type": "object",
        "properties": {
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TriggerEventRequestDto"
            }
          }
        },
        "required": [
          "events"
        ]
      },
      "TriggerEventToAllRequestDtoActor": {
        "description": "It is used to display the Avatar of the provided actor's subscriber id or actor object.\n    If a new actor object is provided, we will create a new subscriber in our system\n    ",
        "oneOf": [
          {
            "type": "string",
            "description": "Unique identifier of a subscriber in your systems"
          },
          {
            "$ref": "#/components/schemas/SubscriberPayloadDto"
          }
        ]
      },
      "TriggerEventToAllRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The trigger identifier associated for the template you wish to send. This identifier can be found on the template page."
          },
          "payload": {
            "type": "object",
            "description": "The payload object is used to pass additional custom information that could be used to render the template, or perform routing rules based on it. \n      This data will also be available when fetching the notifications feed from the API to display certain parts of the UI.",
            "example": {
              "comment_id": "string",
              "post": {
                "text": "string"
              }
            }
          },
          "overrides": {
            "type": "object",
            "description": "This could be used to override provider specific configurations",
            "example": {
              "fcm": {
                "color": "#fff"
              }
            }
          },
          "transactionId": {
            "type": "string",
            "description": "A unique identifier for this transaction, we will generated a UUID if not provided."
          },
          "actor": {
            "$ref": "#/components/schemas/TriggerEventToAllRequestDtoActor"
          }
        },
        "required": [
          "name",
          "payload"
        ]
      },
      "ChannelCredentials": {
        "type": "object",
        "properties": {
          "webhookUrl": {
            "type": "string",
            "description": "Webhook url used by chat app integrations. The webhook should be obtained from the chat app provider."
          },
          "deviceTokens": {
            "description": "Contains an array of the subscriber device tokens for a given provider. Used on Push integrations",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "webhookUrl"
        ]
      },
      "ChannelSettingsProviderId": {
        "type": "string",
        "enum": [
          "slack",
          "discord",
          "msteams",
          "fcm",
          "apns",
          "expo"
        ],
        "description": "Subscriber credentials for channel"
      },
      "ChannelSettingsCredentials":{
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelCredentials"
          }
        ]
      },
      "ChannelSettings": {
        "type": "object",
        "properties": {
          "_integrationId": {
            "type": "string",
            "description": "Id of the integration that is used for this channel"
          },
          "providerId": {
            "$ref": "#/components/schemas/ChannelSettingsProviderId"
          },
          "credentials": {
            "description": "Subscriber credentials for channel",
            "$ref": "#/components/schemas/ChannelSettingsCredentials"
          }
        },
        "required": [
          "_integrationId",
          "providerId",
          "credentials"
        ]
      },
      "SubscriberResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The internal id novu generated for your subscriber, this is not the subscriberId matching your query. See `subscriberId` for that"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "subscriberId": {
            "type": "string",
            "description": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems"
          },
          "channels": {
            "description": "Channels settings for subscriber",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelSettings"
            }
          },
          "isOnline": {
            "type": "boolean"
          },
          "lastOnlineAt": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "deleted": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          },
          "__v": {
            "type": "number"
          }
        },
        "required": [
          "firstName",
          "lastName",
          "email",
          "subscriberId",
          "_organizationId",
          "_environmentId",
          "deleted",
          "createdAt",
          "updatedAt"
        ]
      },
      "SubscribersResponseDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "The current page of the paginated response"
          },
          "totalCount": {
            "type": "number",
            "description": "Total count of subscribers matching the query"
          },
          "pageSize": {
            "type": "number",
            "description": "Number of subscribers on each page"
          },
          "data": {
            "description": "The list of subscribers matching the query",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubscriberResponseDto"
            }
          }
        },
        "required": [
          "page",
          "totalCount",
          "pageSize",
          "data"
        ]
      },
      "CreateSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "subscriberId": {
            "type": "string",
            "description": "The internal identifier you used to create this subscriber, usually correlates to the id the user in your systems"
          },
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string",
            "description": "An http url to the profile image of your subscriber"
          },
          "locale": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        },
        "required": [
          "subscriberId"
        ]
      },
      "UpdateSubscriberRequestDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "avatar": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "UpdateSubscriberChannelRequestDtoProviderId": {
        "type": "string",
        "enum": [
          "slack",
          "discord",
          "msteams",
          "fcm",
          "apns",
          "expo"
        ],
        "description": "The provider identifier for the credentials"
      },
      "UpdateSubscriberChannelRequestDtoCredentials":{
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelCredentials"
          }
        ]
      },
      "UpdateSubscriberChannelRequestDto": {
        "type": "object",
        "properties": {
          "providerId": {
            "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDtoProviderId"
          },
          "credentials": {
            "description": "Credentials payload for the specified provider",
            "$ref": "#/components/schemas/UpdateSubscriberChannelRequestDtoCredentials"
          }
        },
        "required": [
          "providerId",
          "credentials"
        ]
      },
      "UpdateSubscriberOnlineFlagRequestDto": {
        "type": "object",
        "properties": {
          "isOnline": {
            "type": "boolean"
          }
        },
        "required": [
          "isOnline"
        ]
      },
      "DeleteSubscriberResponseDtoStatus": {
        "type": "string",
        "description": "The status enum for the performed action",
        "enum": [
          "deleted"
        ]
      },
      "DeleteSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "A boolean stating the success of the action"
          },
          "status": {
            "$ref": "#/components/schemas/DeleteSubscriberResponseDtoStatus"
          }
        },
        "required": [
          "acknowledged",
          "status"
        ]
      },
      "TemplateResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "Unique identifier of the notification template"
          },
          "name": {
            "type": "string",
            "description": "Name of the notification template"
          },
          "critical": {
            "type": "boolean",
            "description": "Critical templates will always be delivered to the end user and should be hidden from the subscriber preferences screen"
          }
        },
        "required": [
          "_id",
          "name",
          "critical"
        ]
      }, 
      "PrefenceChannel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PreferenceChannels"
          }
        ]
      },
      "Preference": {
        "type": "object",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "Sets if the notification template is fully enabled for all channels or not for the subscriber."
          },
          "channels": {
            "description": "Subscriber preferences for the different channels regarding this notification template",
            "$ref": "#/components/schemas/PrefenceChannel"
          }
        },
        "required": [
          "enabled",
          "channels"
        ]
      },
      "UpdateSubscriberPreferenceResponseDtoPreference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Preference"
          }
        ]
      },
      "UpdateSubscriberPreferenceResponseDtoTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TemplateResponse"
          }
        ]
      },
      "UpdateSubscriberPreferenceResponseDto": {
        "type": "object",
        "properties": {
          "template": {
            "description": "The notification template information and if it is critical or not",
            "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDtoTemplate"
          },
          "preference": {
            "description": "The preferences of the subscriber regarding the related notification template",
            "$ref": "#/components/schemas/UpdateSubscriberPreferenceResponseDtoPreference"
          }
        },
        "required": [
          "template",
          "preference"
        ]
      },
      "ChannelPreferenceType": {
        "type": "string",
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ],
        "description": "The type of channel that is enabled or not"
      },
      "ChannelPreference": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/ChannelPreferenceType"
          },
          "enabled": {
            "type": "boolean",
            "description": "If channel is enabled or not"
          }
        },
        "required": [
          "type",
          "enabled"
        ]
      },
      "UpdateSubscriberPreferenceRequestDtoChannel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ChannelPreference"
          }
        ]
      },
      "UpdateSubscriberPreferenceRequestDto": {
        "type": "object",
        "properties": {
          "channel": {
            "description": "The subscriber preferences for every ChannelTypeEnum for the notification template assigned.",
            "$ref": "#/components/schemas/ChannelPreference"
          },
          "enabled": {
            "type": "boolean",
            "description": "Sets if the notification template is fully enabled for all channels or not for the subscriber."
          }
        }
      },
      "EmailBlockStylesTextAlign": {
        "enum": [
          "left",
          "right",
          "center"
        ],
        "type": "string"
      },
      "EmailBlockStyles": {
        "type": "object",
        "properties": {
          "textAlign": {
            "$ref": "#/components/schemas/EmailBlockStylesTextAlign"
          }
        }
      },
      "EmailBlockType": {
        "enum": [
          "text",
          "button"
        ],
        "type": "string"
      },
      "EmailBlock": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/EmailBlockType"
          },
          "content": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "styles": {
            "$ref": "#/components/schemas/EmailBlockStyles"
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "MessageCTAData": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          }
        }
      },
      "MessageButtonType": {
        "enum": [
          "primary",
          "secondary",
          "clicked"
        ],
        "type": "string"
      },
      "MessageButton": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MessageButtonType"
          },
          "content": {
            "type": "string"
          },
          "resultContent": {
            "type": "string"
          }
        },
        "required": [
          "type",
          "content"
        ]
      },
      "MessageActionResultType": {
        "enum": [
          "primary",
          "secondary",
          "clicked"
        ],
        "type": "string"
      },
      "MessageActionResult": {
        "type": "object",
        "properties": {
          "payload": {
            "type": "object"
          },
          "type": {
            "$ref": "#/components/schemas/MessageActionResultType"
          }
        }
      },
      "MessageActionType":{
        "enum": [
          "pending",
          "done"
        ],
        "type": "string"
      },
      "MessageAction": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/MessageActionType"
          },
          "buttons": {
            
          },
          "result": {
            "$ref": "#/components/schemas/MessageActionResult"
          }
        },
        "required": [
          "result"
        ]
      },
      "MessageCTAType": {
        "type": "string",
        "enum": [
          "redirect"
        ]
      },
      "MessageCTA": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/MessageCTAType"
          },
          "data": {
            "$ref": "#/components/schemas/MessageCTAData"
          },
          "action": {
            "$ref": "#/components/schemas/MessageAction"
          }
        },
        "required": [
          "type",
          "data"
        ]
      },
      "MessageResponseDtoContent": {
        "oneOf": [
          {
            "$ref": "#/components/schemas/EmailBlock"
          },
          {
            "type": "string"
          }
        ]
      },
      "MessageResponseDtoChannel": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ],
        "type": "string"
      },
      "MessageResponseDtoStatus": {
        "type": "string",
        "enum": [
          "sent",
          "error",
          "warning"
        ]
      },
      "MessageResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_templateId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_messageTemplateId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_notificationId": {
            "type": "string"
          },
          "_subscriberId": {
            "type": "string"
          },
          "subscriber": {
            "$ref": "#/components/schemas/SubscriberResponseDto"
          },
          "template": {
            "$ref": "#/components/schemas/NotificationTemplateResponse"
          },
          "templateIdentifier": {
            "type": "string"
          },
          "createdAt": {
            "type": "string"
          },
          "content": {
            "$ref": "#/components/schemas/MessageResponseDtoContent"
          },
          "transactionId": {
            "type": "string"
          },
          "channel": {
            "$ref": "#/components/schemas/MessageResponseDtoChannel"
          },
          "seen": {
            "type": "boolean"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "directWebhookUrl": {
            "type": "string"
          },
          "providerId": {
            "type": "string"
          },
          "deviceTokens": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "title": {
            "type": "string"
          },
          "lastSeenDate": {
            "type": "string"
          },
          "cta": {
            "$ref": "#/components/schemas/MessageCTA"
          },
          "_feedId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/MessageResponseDtoStatus"
          },
          "errorId": {
            "type": "string"
          },
          "errorText": {
            "type": "string"
          },
          "payload": {
            "type": "object",
            "description": "The payload that was used to send the notification trigger"
          },
          "overrides": {
            "type": "object",
            "description": "Provider specific overrides used when triggering the notification"
          },
          "subject": {
            "type": "string"
          }
        },
        "required": [
          "_templateId",
          "_environmentId",
          "_messageTemplateId",
          "_organizationId",
          "_notificationId",
          "_subscriberId",
          "content",
          "transactionId",
          "channel",
          "seen",
          "lastSeenDate",
          "cta",
          "_feedId",
          "status",
          "errorId",
          "errorText",
          "payload",
          "overrides"
        ]
      },
      "GetMessagesParametersSchema": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ],
        "type": "string"
      },
      "MessagesResponseDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessageResponseDto"
            }
          },
          "pageSize": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "required": [
          "totalCount",
          "data",
          "pageSize",
          "page"
        ]
      },
      "UnseenCountResponse": {
        "type": "object",
        "properties": {
          "count": {
            "type": "number"
          }
        },
        "required": [
          "count"
        ]
      },
      "MarkMessageFields": {
        "type": "object",
        "properties": {
          "seen": {
            "type": "boolean"
          },
          "read": {
            "type": "boolean"
          }
        }
      },
      "MarkMessageAsRequestDtoMessageID": {
        "oneOf": [
          {
            "type": "string"
          },
          {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ]
      },
      "MarkMessageAsRequestDto": {
        "type": "object",
        "properties": {
          "messageId": {
            "$ref": "#/components/schemas/MarkMessageAsRequestDtoMessageID"
          },
          "mark": {
            "$ref": "#/components/schemas/MarkMessageFields"
          }
        },
        "required": [
          "messageId",
          "mark"
        ]
      },
      "CreateTopicRequestDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "User defined custom key and provided by the user that will be an unique identifier for the Topic created."
          },
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user that will name the Topic created."
          }
        },
        "required": [
          "key",
          "name"
        ]
      },
      "CreateTopicResponseDto": {
        "type": "object",
        "properties": {}
      },
      "AddSubscribersRequestDto": {
        "type": "object",
        "properties": {
          "subscribers": {
            "description": "List of subscriber identifiers that will be associated to the topic",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "subscribers"
        ]
      },
      "RemoveSubscribersRequestDto": {
        "type": "object",
        "properties": {
          "subscribers": {
            "description": "List of subscriber identifiers that will be removed to the topic",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "subscribers"
        ]
      },
      "FilterTopicsResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "page": {
            "type": "number"
          },
          "pageSize": {
            "type": "number"
          },
          "totalCount": {
            "type": "number"
          }
        },
        "required": [
          "data",
          "page",
          "pageSize",
          "totalCount"
        ]
      },
      "GetTopicResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_organizationId",
          "_environmentId",
          "key",
          "name",
          "subscribers"
        ]
      },
      "RenameTopicRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User defined custom name and provided by the user to rename the topic."
          }
        },
        "required": [
          "name"
        ]
      },
      "RenameTopicResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "subscribers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "_organizationId",
          "_environmentId",
          "key",
          "name",
          "subscribers"
        ]
      },
      "ActivityNotificationSubscriberResponseDto": {
        "type": "object",
        "properties": {
          "firstName": {
            "type": "string"
          },
          "_id": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          }
        },
        "required": [
          "_id"
        ]
      },
      "ActivityNotificationTemplateResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTrigger"
            }
          }
        },
        "required": [
          "name",
          "triggers"
        ]
      },
      "ActivityNotificationExecutionDetailResponseDtoStatus": {
        "enum": [
          "Success",
          "Warning",
          "Failed",
          "Pending",
          "Queued",
          "ReadConfirmation"
        ],
        "type": "string"
      },
      "ActivityNotificationExecutionDetailResponseDtoSource": {
        "enum": [
          "Credentials",
          "Internal",
          "Payload",
          "Webhook"
        ],
        "type": "string"
      },
      "ActivityNotificationExecutionDetailResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_jobId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/ActivityNotificationExecutionDetailResponseDtoStatus"
          },
          "detail": {
            "type": "string"
          },
          "isRetry": {
            "type": "boolean"
          },
          "isTest": {
            "type": "boolean"
          },
          "providerId": {
            "type": "object"
          },
          "raw": {
            "type": "string"
          },
          "source": {
            "$ref": "#/components/schemas/ActivityNotificationExecutionDetailResponseDtoSource"
          }
        },
        "required": [
          "_id",
          "_jobId",
          "status",
          "detail",
          "isRetry",
          "isTest",
          "providerId",
          "source"
        ]
      },
      "MessageTemplateDto": {
        "type": "object",
        "properties": {}
      },
      "ActivityNotificationStepResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "filters": {
            "$ref": "#/components/schemas/StepFilter"
          },
          "template": {
            "$ref": "#/components/schemas/MessageTemplateDto"
          }
        },
        "required": [
          "_id",
          "active",
          "filters"
        ]
      },
      "ActivityNotificationJobResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "digest": {
            "type": "object"
          },
          "executionDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationExecutionDetailResponseDto"
            }
          },
          "step": {
            "$ref": "#/components/schemas/ActivityNotificationStepResponseDto"
          },
          "payload": {
            "type": "object"
          },
          "providerId": {
            "type": "object"
          },
          "status": {
            "type": "string"
          }
        },
        "required": [
          "_id",
          "type",
          "executionDetails",
          "step",
          "providerId",
          "status"
        ]
      },
      "ActivityNotificationResponseDtoChannels": {
        "type": "string",
        "items": {
          "type": "string",
          "enum": [
            "in_app",
            "email",
            "sms",
            "chat",
            "push",
            "digest",
            "trigger",
            "delay"
          ]
        },
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push",
          "digest",
          "trigger",
          "delay"
        ]
      },
      "ActivityNotificationResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          },
          "transactionId": {
            "type": "string"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string"
          },
          "channels": {
            "$ref": "#/components/schemas/ActivityNotificationResponseDtoChannels"
          },
          "subscriber": {
            "$ref": "#/components/schemas/ActivityNotificationSubscriberResponseDto"
          },
          "template": {
            "$ref": "#/components/schemas/ActivityNotificationTemplateResponseDto"
          },
          "jobs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationJobResponseDto"
            }
          }
        },
        "required": [
          "_environmentId",
          "_organizationId",
          "transactionId"
        ]
      },

      "ActivitiesResponseDto": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityNotificationResponseDto"
            }
          },
          "pageSize": {
            "type": "number"
          },
          "page": {
            "type": "number"
          }
        },
        "required": [
          "totalCount",
          "data",
          "pageSize",
          "page"
        ]
      },
      "ActivityStatsResponseDto": {
        "type": "object",
        "properties": {
          "weeklySent": {
            "type": "number"
          },
          "monthlySent": {
            "type": "number"
          },
          "yearlySent": {
            "type": "number"
          }
        },
        "required": [
          "weeklySent",
          "monthlySent",
          "yearlySent"
        ]
      },
      "ActivityGraphStatesResponseItems": {
        "enum": [
          "in_app",
          "email",
          "sms",
          "chat",
          "push"
        ]
      },
      "ActivityGraphStatesResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "count": {
            "type": "number"
          },
          "templates": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channels": {
            "type": "array",
            "items": {
              "type": "string",
              "$ref": "#/components/schemas/ActivityGraphStatesResponseItems"
            }
          }
        },
        "required": [
          "_id",
          "count",
          "templates",
          "channels"
        ]
      },
      "CreateFeedRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "FeedResponseDto": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "identifier": {
            "type": "string"
          },
          "_environmentId": {
            "type": "string"
          },
          "_organizationId": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "identifier",
          "_environmentId",
          "_organizationId"
        ]
      },
      "DeleteMessageResponseDtoStatus": {
        "type": "string",
        "description": "The status enum for the performed action",
        "enum": [
          "deleted"
        ]
      },
      "DeleteMessageResponseDto": {
        "type": "object",
        "properties": {
          "acknowledged": {
            "type": "boolean",
            "description": "A boolean stating the success of the action"
          },
          "status": {
            "$ref": "#/components/schemas/DeleteMessageResponseDtoStatus"
          }
        },
        "required": [
          "acknowledged",
          "status"
        ]
      }
    }
  }
}